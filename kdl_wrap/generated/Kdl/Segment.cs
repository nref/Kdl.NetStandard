//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class Segment : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Segment(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Segment obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Segment obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Segment() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_Segment(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Segment(string name, Joint joint, Frame f_tip, RigidBodyInertia I) : this(kdlPINVOKE.new_Segment__SWIG_0(name, Joint.getCPtr(joint), Frame.getCPtr(f_tip), RigidBodyInertia.getCPtr(I)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(string name, Joint joint, Frame f_tip) : this(kdlPINVOKE.new_Segment__SWIG_1(name, Joint.getCPtr(joint), Frame.getCPtr(f_tip)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(string name, Joint joint) : this(kdlPINVOKE.new_Segment__SWIG_2(name, Joint.getCPtr(joint)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(string name) : this(kdlPINVOKE.new_Segment__SWIG_3(name), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(Joint joint, Frame f_tip, RigidBodyInertia I) : this(kdlPINVOKE.new_Segment__SWIG_4(Joint.getCPtr(joint), Frame.getCPtr(f_tip), RigidBodyInertia.getCPtr(I)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(Joint joint, Frame f_tip) : this(kdlPINVOKE.new_Segment__SWIG_5(Joint.getCPtr(joint), Frame.getCPtr(f_tip)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(Joint joint) : this(kdlPINVOKE.new_Segment__SWIG_6(Joint.getCPtr(joint)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment() : this(kdlPINVOKE.new_Segment__SWIG_7(), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Segment(Segment _in) : this(kdlPINVOKE.new_Segment__SWIG_8(Segment.getCPtr(_in)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Frame pose(double q) {
    Frame ret = new Frame(kdlPINVOKE.Segment_pose(swigCPtr, q), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Twist twist(double q, double qdot) {
    Twist ret = new Twist(kdlPINVOKE.Segment_twist(swigCPtr, q, qdot), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
    string ret = kdlPINVOKE.Segment_getName(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Joint getJoint() {
    Joint ret = new Joint(kdlPINVOKE.Segment_getJoint(swigCPtr), false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RigidBodyInertia getInertia() {
    RigidBodyInertia ret = new RigidBodyInertia(kdlPINVOKE.Segment_getInertia(swigCPtr), false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInertia(RigidBodyInertia Iin) {
    kdlPINVOKE.Segment_setInertia(swigCPtr, RigidBodyInertia.getCPtr(Iin));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Frame getFrameToTip() {
    Frame ret = new Frame(kdlPINVOKE.Segment_getFrameToTip(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFrameToTip(Frame f_tip_new) {
    kdlPINVOKE.Segment_setFrameToTip(swigCPtr, Frame.getCPtr(f_tip_new));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
