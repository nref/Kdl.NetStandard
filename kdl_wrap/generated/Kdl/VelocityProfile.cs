//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class VelocityProfile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VelocityProfile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VelocityProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(VelocityProfile obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~VelocityProfile() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_VelocityProfile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void SetProfile(double pos1, double pos2) {
    kdlPINVOKE.VelocityProfile_SetProfile(swigCPtr, pos1, pos2);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetProfileDuration(double pos1, double pos2, double duration) {
    kdlPINVOKE.VelocityProfile_SetProfileDuration(swigCPtr, pos1, pos2, duration);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double Duration() {
    double ret = kdlPINVOKE.VelocityProfile_Duration(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Pos(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Pos(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Vel(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Vel(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Acc(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Acc(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Write(SWIGTYPE_p_std__ostream os) {
    kdlPINVOKE.VelocityProfile_Write(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VelocityProfile Read(SWIGTYPE_p_std__istream _is) {
    global::System.IntPtr cPtr = kdlPINVOKE.VelocityProfile_Read(SWIGTYPE_p_std__istream.getCPtr(_is));
    VelocityProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new VelocityProfile(cPtr, false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VelocityProfile c_Clone() {
    global::System.IntPtr cPtr = kdlPINVOKE.VelocityProfile_c_Clone(swigCPtr);
    VelocityProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new VelocityProfile(cPtr, false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
