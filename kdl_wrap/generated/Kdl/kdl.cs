//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class kdl {
  public static double c_sin(double a) {
    double ret = kdlPINVOKE.c_sin(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_cos(double a) {
    double ret = kdlPINVOKE.c_cos(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_exp(double a) {
    double ret = kdlPINVOKE.c_exp(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_log(double a) {
    double ret = kdlPINVOKE.c_log(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_tan(double a) {
    double ret = kdlPINVOKE.c_tan(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_cosh(double a) {
    double ret = kdlPINVOKE.c_cosh(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_sinh(double a) {
    double ret = kdlPINVOKE.c_sinh(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_sqrt(double a) {
    double ret = kdlPINVOKE.c_sqrt(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_atan(double a) {
    double ret = kdlPINVOKE.c_atan(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_acos(double a) {
    double ret = kdlPINVOKE.c_acos(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_asin(double a) {
    double ret = kdlPINVOKE.c_asin(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_tanh(double a) {
    double ret = kdlPINVOKE.c_tanh(a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pow(double a, double b) {
    double ret = kdlPINVOKE.pow(a, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double c_atan2(double a, double b) {
    double ret = kdlPINVOKE.c_atan2(a, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int STREAMBUFFERSIZE {
    set {
      kdlPINVOKE.STREAMBUFFERSIZE_set(value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = kdlPINVOKE.STREAMBUFFERSIZE_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MAXLENFILENAME {
    set {
      kdlPINVOKE.MAXLENFILENAME_set(value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = kdlPINVOKE.MAXLENFILENAME_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double PI {
    get {
      double ret = kdlPINVOKE.PI_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double deg2rad {
    get {
      double ret = kdlPINVOKE.deg2rad_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double rad2deg {
    get {
      double ret = kdlPINVOKE.rad2deg_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double epsilon {
    set {
      kdlPINVOKE.epsilon_set(value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = kdlPINVOKE.epsilon_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int VSIZE {
    set {
      kdlPINVOKE.VSIZE_set(value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = kdlPINVOKE.VSIZE_get();
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double max(double a, double b) {
    double ret = kdlPINVOKE.max(a, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double min(double a, double b) {
    double ret = kdlPINVOKE.min(a, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double LinComb(double alfa, double a, double beta, double b) {
    double ret = kdlPINVOKE.LinComb(alfa, a, beta, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void LinCombR(double alfa, double a, double beta, double b, out double result) {
    kdlPINVOKE.LinCombR(alfa, a, beta, b, out result);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZero(out double arg) {
    kdlPINVOKE.SetToZero__SWIG_0(out arg);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToIdentity(out double arg) {
    kdlPINVOKE.SetToIdentity(out arg);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double sign(double arg) {
    double ret = kdlPINVOKE.sign(arg);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sqr(double arg) {
    double ret = kdlPINVOKE.sqr(arg);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Norm(double arg) {
    double ret = kdlPINVOKE.Norm(arg);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(double a, double b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_0(a, b, eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(double a, double b) {
    bool ret = kdlPINVOKE.Equal__SWIG_1(a, b);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void random(out double a) {
    kdlPINVOKE.random__SWIG_0(out a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(out double a) {
    kdlPINVOKE.posrandom__SWIG_0(out a);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double diff(double a, double b, double dt) {
    double ret = kdlPINVOKE.diff__SWIG_0(a, b, dt);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double addDelta(double a, double da, double dt) {
    double ret = kdlPINVOKE.addDelta__SWIG_0(a, da, dt);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector a, Vector b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_2(Vector.getCPtr(a), Vector.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector a, Vector b) {
    bool ret = kdlPINVOKE.Equal__SWIG_3(Vector.getCPtr(a), Vector.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame a, Frame b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_4(Frame.getCPtr(a), Frame.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame a, Frame b) {
    bool ret = kdlPINVOKE.Equal__SWIG_5(Frame.getCPtr(a), Frame.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, Twist b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_6(Twist.getCPtr(a), Twist.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, Twist b) {
    bool ret = kdlPINVOKE.Equal__SWIG_7(Twist.getCPtr(a), Twist.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Wrench a, Wrench b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_8(Wrench.getCPtr(a), Wrench.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Wrench a, Wrench b) {
    bool ret = kdlPINVOKE.Equal__SWIG_9(Wrench.getCPtr(a), Wrench.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector2 a, Vector2 b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_10(Vector2.getCPtr(a), Vector2.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector2 a, Vector2 b) {
    bool ret = kdlPINVOKE.Equal__SWIG_11(Vector2.getCPtr(a), Vector2.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation2 a, Rotation2 b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_12(Rotation2.getCPtr(a), Rotation2.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation2 a, Rotation2 b) {
    bool ret = kdlPINVOKE.Equal__SWIG_13(Rotation2.getCPtr(a), Rotation2.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(SWIGTYPE_p_KDL__Frame2 a, SWIGTYPE_p_KDL__Frame2 b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_14(SWIGTYPE_p_KDL__Frame2.getCPtr(a), SWIGTYPE_p_KDL__Frame2.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(SWIGTYPE_p_KDL__Frame2 a, SWIGTYPE_p_KDL__Frame2 b) {
    bool ret = kdlPINVOKE.Equal__SWIG_15(SWIGTYPE_p_KDL__Frame2.getCPtr(a), SWIGTYPE_p_KDL__Frame2.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation a, Rotation b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_16(Rotation.getCPtr(a), Rotation.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation a, Rotation b) {
    bool ret = kdlPINVOKE.Equal__SWIG_17(Rotation.getCPtr(a), Rotation.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector diff(Vector p_w_a, Vector p_w_b, double dt) {
    Vector ret = new Vector(kdlPINVOKE.diff__SWIG_1(Vector.getCPtr(p_w_a), Vector.getCPtr(p_w_b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector diff(Vector p_w_a, Vector p_w_b) {
    Vector ret = new Vector(kdlPINVOKE.diff__SWIG_2(Vector.getCPtr(p_w_a), Vector.getCPtr(p_w_b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector diff(Rotation R_a_b1, Rotation R_a_b2, double dt) {
    Vector ret = new Vector(kdlPINVOKE.diff__SWIG_3(Rotation.getCPtr(R_a_b1), Rotation.getCPtr(R_a_b2), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector diff(Rotation R_a_b1, Rotation R_a_b2) {
    Vector ret = new Vector(kdlPINVOKE.diff__SWIG_4(Rotation.getCPtr(R_a_b1), Rotation.getCPtr(R_a_b2)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist diff(Frame F_a_b1, Frame F_a_b2, double dt) {
    Twist ret = new Twist(kdlPINVOKE.diff__SWIG_5(Frame.getCPtr(F_a_b1), Frame.getCPtr(F_a_b2), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist diff(Frame F_a_b1, Frame F_a_b2) {
    Twist ret = new Twist(kdlPINVOKE.diff__SWIG_6(Frame.getCPtr(F_a_b1), Frame.getCPtr(F_a_b2)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist diff(Twist a, Twist b, double dt) {
    Twist ret = new Twist(kdlPINVOKE.diff__SWIG_7(Twist.getCPtr(a), Twist.getCPtr(b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist diff(Twist a, Twist b) {
    Twist ret = new Twist(kdlPINVOKE.diff__SWIG_8(Twist.getCPtr(a), Twist.getCPtr(b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Wrench diff(Wrench W_a_p1, Wrench W_a_p2, double dt) {
    Wrench ret = new Wrench(kdlPINVOKE.diff__SWIG_9(Wrench.getCPtr(W_a_p1), Wrench.getCPtr(W_a_p2), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Wrench diff(Wrench W_a_p1, Wrench W_a_p2) {
    Wrench ret = new Wrench(kdlPINVOKE.diff__SWIG_10(Wrench.getCPtr(W_a_p1), Wrench.getCPtr(W_a_p2)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector addDelta(Vector p_w_a, Vector p_w_da, double dt) {
    Vector ret = new Vector(kdlPINVOKE.addDelta__SWIG_1(Vector.getCPtr(p_w_a), Vector.getCPtr(p_w_da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector addDelta(Vector p_w_a, Vector p_w_da) {
    Vector ret = new Vector(kdlPINVOKE.addDelta__SWIG_2(Vector.getCPtr(p_w_a), Vector.getCPtr(p_w_da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Rotation addDelta(Rotation R_w_a, Vector da_w, double dt) {
    Rotation ret = new Rotation(kdlPINVOKE.addDelta__SWIG_3(Rotation.getCPtr(R_w_a), Vector.getCPtr(da_w), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Rotation addDelta(Rotation R_w_a, Vector da_w) {
    Rotation ret = new Rotation(kdlPINVOKE.addDelta__SWIG_4(Rotation.getCPtr(R_w_a), Vector.getCPtr(da_w)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Frame addDelta(Frame F_w_a, Twist da_w, double dt) {
    Frame ret = new Frame(kdlPINVOKE.addDelta__SWIG_5(Frame.getCPtr(F_w_a), Twist.getCPtr(da_w), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Frame addDelta(Frame F_w_a, Twist da_w) {
    Frame ret = new Frame(kdlPINVOKE.addDelta__SWIG_6(Frame.getCPtr(F_w_a), Twist.getCPtr(da_w)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist addDelta(Twist a, Twist da, double dt) {
    Twist ret = new Twist(kdlPINVOKE.addDelta__SWIG_7(Twist.getCPtr(a), Twist.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Twist addDelta(Twist a, Twist da) {
    Twist ret = new Twist(kdlPINVOKE.addDelta__SWIG_8(Twist.getCPtr(a), Twist.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Wrench addDelta(Wrench a, Wrench da, double dt) {
    Wrench ret = new Wrench(kdlPINVOKE.addDelta__SWIG_9(Wrench.getCPtr(a), Wrench.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Wrench addDelta(Wrench a, Wrench da) {
    Wrench ret = new Wrench(kdlPINVOKE.addDelta__SWIG_10(Wrench.getCPtr(a), Wrench.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Rall1dT_double_t diff(SWIGTYPE_p_Rall1dT_double_t a, SWIGTYPE_p_Rall1dT_double_t b, double dt) {
    SWIGTYPE_p_Rall1dT_double_t ret = new SWIGTYPE_p_Rall1dT_double_t(kdlPINVOKE.diff__SWIG_11(SWIGTYPE_p_Rall1dT_double_t.getCPtr(a), SWIGTYPE_p_Rall1dT_double_t.getCPtr(b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Rall1dT_double_t diff(SWIGTYPE_p_Rall1dT_double_t a, SWIGTYPE_p_Rall1dT_double_t b) {
    SWIGTYPE_p_Rall1dT_double_t ret = new SWIGTYPE_p_Rall1dT_double_t(kdlPINVOKE.diff__SWIG_12(SWIGTYPE_p_Rall1dT_double_t.getCPtr(a), SWIGTYPE_p_Rall1dT_double_t.getCPtr(b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Rall1dT_double_t addDelta(SWIGTYPE_p_Rall1dT_double_t a, SWIGTYPE_p_Rall1dT_double_t da, double dt) {
    SWIGTYPE_p_Rall1dT_double_t ret = new SWIGTYPE_p_Rall1dT_double_t(kdlPINVOKE.addDelta__SWIG_11(SWIGTYPE_p_Rall1dT_double_t.getCPtr(a), SWIGTYPE_p_Rall1dT_double_t.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Rall1dT_double_t addDelta(SWIGTYPE_p_Rall1dT_double_t a, SWIGTYPE_p_Rall1dT_double_t da) {
    SWIGTYPE_p_Rall1dT_double_t ret = new SWIGTYPE_p_Rall1dT_double_t(kdlPINVOKE.addDelta__SWIG_12(SWIGTYPE_p_Rall1dT_double_t.getCPtr(a), SWIGTYPE_p_Rall1dT_double_t.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void random(SWIGTYPE_p_Rall1dT_double_t F) {
    kdlPINVOKE.random__SWIG_1(SWIGTYPE_p_Rall1dT_double_t.getCPtr(F));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(SWIGTYPE_p_Rall1dT_double_t F) {
    kdlPINVOKE.posrandom__SWIG_1(SWIGTYPE_p_Rall1dT_double_t.getCPtr(F));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool Equal(VectorVel r1, VectorVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_18(VectorVel.getCPtr(r1), VectorVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorVel r1, VectorVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_19(VectorVel.getCPtr(r1), VectorVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector r1, VectorVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_20(Vector.getCPtr(r1), VectorVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector r1, VectorVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_21(Vector.getCPtr(r1), VectorVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorVel r1, Vector r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_22(VectorVel.getCPtr(r1), Vector.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorVel r1, Vector r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_23(VectorVel.getCPtr(r1), Vector.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationVel r1, RotationVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_24(RotationVel.getCPtr(r1), RotationVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationVel r1, RotationVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_25(RotationVel.getCPtr(r1), RotationVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation r1, RotationVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_26(Rotation.getCPtr(r1), RotationVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation r1, RotationVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_27(Rotation.getCPtr(r1), RotationVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationVel r1, Rotation r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_28(RotationVel.getCPtr(r1), Rotation.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationVel r1, Rotation r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_29(RotationVel.getCPtr(r1), Rotation.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameVel r1, FrameVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_30(FrameVel.getCPtr(r1), FrameVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameVel r1, FrameVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_31(FrameVel.getCPtr(r1), FrameVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame r1, FrameVel r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_32(Frame.getCPtr(r1), FrameVel.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame r1, FrameVel r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_33(Frame.getCPtr(r1), FrameVel.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameVel r1, Frame r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_34(FrameVel.getCPtr(r1), Frame.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameVel r1, Frame r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_35(FrameVel.getCPtr(r1), Frame.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistVel a, TwistVel b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_36(TwistVel.getCPtr(a), TwistVel.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistVel a, TwistVel b) {
    bool ret = kdlPINVOKE.Equal__SWIG_37(TwistVel.getCPtr(a), TwistVel.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, TwistVel b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_38(Twist.getCPtr(a), TwistVel.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, TwistVel b) {
    bool ret = kdlPINVOKE.Equal__SWIG_39(Twist.getCPtr(a), TwistVel.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistVel a, Twist b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_40(TwistVel.getCPtr(a), Twist.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistVel a, Twist b) {
    bool ret = kdlPINVOKE.Equal__SWIG_41(TwistVel.getCPtr(a), Twist.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel diff(VectorVel a, VectorVel b, double dt) {
    VectorVel ret = new VectorVel(kdlPINVOKE.diff__SWIG_13(VectorVel.getCPtr(a), VectorVel.getCPtr(b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel diff(VectorVel a, VectorVel b) {
    VectorVel ret = new VectorVel(kdlPINVOKE.diff__SWIG_14(VectorVel.getCPtr(a), VectorVel.getCPtr(b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel addDelta(VectorVel a, VectorVel da, double dt) {
    VectorVel ret = new VectorVel(kdlPINVOKE.addDelta__SWIG_13(VectorVel.getCPtr(a), VectorVel.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel addDelta(VectorVel a, VectorVel da) {
    VectorVel ret = new VectorVel(kdlPINVOKE.addDelta__SWIG_14(VectorVel.getCPtr(a), VectorVel.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel diff(RotationVel a, RotationVel b, double dt) {
    VectorVel ret = new VectorVel(kdlPINVOKE.diff__SWIG_15(RotationVel.getCPtr(a), RotationVel.getCPtr(b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VectorVel diff(RotationVel a, RotationVel b) {
    VectorVel ret = new VectorVel(kdlPINVOKE.diff__SWIG_16(RotationVel.getCPtr(a), RotationVel.getCPtr(b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel addDelta(RotationVel a, VectorVel da, double dt) {
    RotationVel ret = new RotationVel(kdlPINVOKE.addDelta__SWIG_15(RotationVel.getCPtr(a), VectorVel.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel addDelta(RotationVel a, VectorVel da) {
    RotationVel ret = new RotationVel(kdlPINVOKE.addDelta__SWIG_16(RotationVel.getCPtr(a), VectorVel.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TwistVel diff(FrameVel a, FrameVel b, double dt) {
    TwistVel ret = new TwistVel(kdlPINVOKE.diff__SWIG_17(FrameVel.getCPtr(a), FrameVel.getCPtr(b), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TwistVel diff(FrameVel a, FrameVel b) {
    TwistVel ret = new TwistVel(kdlPINVOKE.diff__SWIG_18(FrameVel.getCPtr(a), FrameVel.getCPtr(b)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FrameVel addDelta(FrameVel a, TwistVel da, double dt) {
    FrameVel ret = new FrameVel(kdlPINVOKE.addDelta__SWIG_17(FrameVel.getCPtr(a), TwistVel.getCPtr(da), dt), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FrameVel addDelta(FrameVel a, TwistVel da) {
    FrameVel ret = new FrameVel(kdlPINVOKE.addDelta__SWIG_18(FrameVel.getCPtr(a), TwistVel.getCPtr(da)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void random(VectorVel a) {
    kdlPINVOKE.random__SWIG_2(VectorVel.getCPtr(a));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random(TwistVel a) {
    kdlPINVOKE.random__SWIG_3(TwistVel.getCPtr(a));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random(RotationVel R) {
    kdlPINVOKE.random__SWIG_4(RotationVel.getCPtr(R));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void random(FrameVel F) {
    kdlPINVOKE.random__SWIG_5(FrameVel.getCPtr(F));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(VectorVel a) {
    kdlPINVOKE.posrandom__SWIG_2(VectorVel.getCPtr(a));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(TwistVel a) {
    kdlPINVOKE.posrandom__SWIG_3(TwistVel.getCPtr(a));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(RotationVel R) {
    kdlPINVOKE.posrandom__SWIG_4(RotationVel.getCPtr(R));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void posrandom(FrameVel F) {
    kdlPINVOKE.posrandom__SWIG_5(FrameVel.getCPtr(F));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool Equal(FrameAcc r1, FrameAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_42(FrameAcc.getCPtr(r1), FrameAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameAcc r1, FrameAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_43(FrameAcc.getCPtr(r1), FrameAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame r1, FrameAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_44(Frame.getCPtr(r1), FrameAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Frame r1, FrameAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_45(Frame.getCPtr(r1), FrameAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameAcc r1, Frame r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_46(FrameAcc.getCPtr(r1), Frame.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(FrameAcc r1, Frame r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_47(FrameAcc.getCPtr(r1), Frame.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationAcc r1, RotationAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_48(RotationAcc.getCPtr(r1), RotationAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationAcc r1, RotationAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_49(RotationAcc.getCPtr(r1), RotationAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation r1, RotationAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_50(Rotation.getCPtr(r1), RotationAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Rotation r1, RotationAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_51(Rotation.getCPtr(r1), RotationAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationAcc r1, Rotation r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_52(RotationAcc.getCPtr(r1), Rotation.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(RotationAcc r1, Rotation r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_53(RotationAcc.getCPtr(r1), Rotation.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistAcc a, TwistAcc b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_54(TwistAcc.getCPtr(a), TwistAcc.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistAcc a, TwistAcc b) {
    bool ret = kdlPINVOKE.Equal__SWIG_55(TwistAcc.getCPtr(a), TwistAcc.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, TwistAcc b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_56(Twist.getCPtr(a), TwistAcc.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Twist a, TwistAcc b) {
    bool ret = kdlPINVOKE.Equal__SWIG_57(Twist.getCPtr(a), TwistAcc.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistAcc a, Twist b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_58(TwistAcc.getCPtr(a), Twist.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(TwistAcc a, Twist b) {
    bool ret = kdlPINVOKE.Equal__SWIG_59(TwistAcc.getCPtr(a), Twist.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorAcc r1, VectorAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_60(VectorAcc.getCPtr(r1), VectorAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorAcc r1, VectorAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_61(VectorAcc.getCPtr(r1), VectorAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector r1, VectorAcc r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_62(Vector.getCPtr(r1), VectorAcc.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Vector r1, VectorAcc r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_63(Vector.getCPtr(r1), VectorAcc.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorAcc r1, Vector r2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_64(VectorAcc.getCPtr(r1), Vector.getCPtr(r2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(VectorAcc r1, Vector r2) {
    bool ret = kdlPINVOKE.Equal__SWIG_65(VectorAcc.getCPtr(r1), Vector.getCPtr(r2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Jacobian a, Jacobian b, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_66(Jacobian.getCPtr(a), Jacobian.getCPtr(b), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(Jacobian a, Jacobian b) {
    bool ret = kdlPINVOKE.Equal__SWIG_67(Jacobian.getCPtr(a), Jacobian.getCPtr(b));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetToZero(Jacobian jac) {
    kdlPINVOKE.SetToZero__SWIG_1(Jacobian.getCPtr(jac));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool changeRefPoint(Jacobian src1, Vector base_AB, Jacobian dest) {
    bool ret = kdlPINVOKE.changeRefPoint(Jacobian.getCPtr(src1), Vector.getCPtr(base_AB), Jacobian.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool changeBase(Jacobian src1, Rotation rot, Jacobian dest) {
    bool ret = kdlPINVOKE.changeBase(Jacobian.getCPtr(src1), Rotation.getCPtr(rot), Jacobian.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool changeRefFrame(Jacobian src1, Frame frame, Jacobian dest) {
    bool ret = kdlPINVOKE.changeRefFrame(Jacobian.getCPtr(src1), Frame.getCPtr(frame), Jacobian.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Add(JntArray src1, JntArray src2, JntArray dest) {
    kdlPINVOKE.Add__SWIG_0(JntArray.getCPtr(src1), JntArray.getCPtr(src2), JntArray.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArray src1, JntArray src2, JntArray dest) {
    kdlPINVOKE.Subtract__SWIG_0(JntArray.getCPtr(src1), JntArray.getCPtr(src2), JntArray.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArray src, double factor, JntArray dest) {
    kdlPINVOKE.Multiply__SWIG_0(JntArray.getCPtr(src), factor, JntArray.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArray src, double factor, JntArray dest) {
    kdlPINVOKE.Divide__SWIG_0(JntArray.getCPtr(src), factor, JntArray.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MultiplyJacobian(Jacobian jac, JntArray src, Twist dest) {
    kdlPINVOKE.MultiplyJacobian(Jacobian.getCPtr(jac), JntArray.getCPtr(src), Twist.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZero(JntArray array) {
    kdlPINVOKE.SetToZero__SWIG_2(JntArray.getCPtr(array));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool Equal(JntArray src1, JntArray src2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_68(JntArray.getCPtr(src1), JntArray.getCPtr(src2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(JntArray src1, JntArray src2) {
    bool ret = kdlPINVOKE.Equal__SWIG_69(JntArray.getCPtr(src1), JntArray.getCPtr(src2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(JntArrayVel src1, JntArrayVel src2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_70(JntArrayVel.getCPtr(src1), JntArrayVel.getCPtr(src2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(JntArrayVel src1, JntArrayVel src2) {
    bool ret = kdlPINVOKE.Equal__SWIG_71(JntArrayVel.getCPtr(src1), JntArrayVel.getCPtr(src2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Add(JntArrayVel src1, JntArrayVel src2, JntArrayVel dest) {
    kdlPINVOKE.Add__SWIG_1(JntArrayVel.getCPtr(src1), JntArrayVel.getCPtr(src2), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(JntArrayVel src1, JntArray src2, JntArrayVel dest) {
    kdlPINVOKE.Add__SWIG_2(JntArrayVel.getCPtr(src1), JntArray.getCPtr(src2), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArrayVel src1, JntArrayVel src2, JntArrayVel dest) {
    kdlPINVOKE.Subtract__SWIG_1(JntArrayVel.getCPtr(src1), JntArrayVel.getCPtr(src2), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArrayVel src1, JntArray src2, JntArrayVel dest) {
    kdlPINVOKE.Subtract__SWIG_2(JntArrayVel.getCPtr(src1), JntArray.getCPtr(src2), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArrayVel src, double factor, JntArrayVel dest) {
    kdlPINVOKE.Multiply__SWIG_1(JntArrayVel.getCPtr(src), factor, JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArrayVel src, SWIGTYPE_p_Rall1dT_double_t factor, JntArrayVel dest) {
    kdlPINVOKE.Multiply__SWIG_2(JntArrayVel.getCPtr(src), SWIGTYPE_p_Rall1dT_double_t.getCPtr(factor), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArrayVel src, double factor, JntArrayVel dest) {
    kdlPINVOKE.Divide__SWIG_1(JntArrayVel.getCPtr(src), factor, JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArrayVel src, SWIGTYPE_p_Rall1dT_double_t factor, JntArrayVel dest) {
    kdlPINVOKE.Divide__SWIG_2(JntArrayVel.getCPtr(src), SWIGTYPE_p_Rall1dT_double_t.getCPtr(factor), JntArrayVel.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZero(JntArrayVel array) {
    kdlPINVOKE.SetToZero__SWIG_3(JntArrayVel.getCPtr(array));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool Equal(JntArrayAcc src1, JntArrayAcc src2, double eps) {
    bool ret = kdlPINVOKE.Equal__SWIG_72(JntArrayAcc.getCPtr(src1), JntArrayAcc.getCPtr(src2), eps);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Equal(JntArrayAcc src1, JntArrayAcc src2) {
    bool ret = kdlPINVOKE.Equal__SWIG_73(JntArrayAcc.getCPtr(src1), JntArrayAcc.getCPtr(src2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Add(JntArrayAcc src1, JntArrayAcc src2, JntArrayAcc dest) {
    kdlPINVOKE.Add__SWIG_3(JntArrayAcc.getCPtr(src1), JntArrayAcc.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(JntArrayAcc src1, JntArrayVel src2, JntArrayAcc dest) {
    kdlPINVOKE.Add__SWIG_4(JntArrayAcc.getCPtr(src1), JntArrayVel.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Add(JntArrayAcc src1, JntArray src2, JntArrayAcc dest) {
    kdlPINVOKE.Add__SWIG_5(JntArrayAcc.getCPtr(src1), JntArray.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArrayAcc src1, JntArrayAcc src2, JntArrayAcc dest) {
    kdlPINVOKE.Subtract__SWIG_3(JntArrayAcc.getCPtr(src1), JntArrayAcc.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArrayAcc src1, JntArrayVel src2, JntArrayAcc dest) {
    kdlPINVOKE.Subtract__SWIG_4(JntArrayAcc.getCPtr(src1), JntArrayVel.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Subtract(JntArrayAcc src1, JntArray src2, JntArrayAcc dest) {
    kdlPINVOKE.Subtract__SWIG_5(JntArrayAcc.getCPtr(src1), JntArray.getCPtr(src2), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArrayAcc src, double factor, JntArrayAcc dest) {
    kdlPINVOKE.Multiply__SWIG_3(JntArrayAcc.getCPtr(src), factor, JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArrayAcc src, SWIGTYPE_p_Rall1dT_double_t factor, JntArrayAcc dest) {
    kdlPINVOKE.Multiply__SWIG_4(JntArrayAcc.getCPtr(src), SWIGTYPE_p_Rall1dT_double_t.getCPtr(factor), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Multiply(JntArrayAcc src, SWIGTYPE_p_Rall2dT_double_double_double_t factor, JntArrayAcc dest) {
    kdlPINVOKE.Multiply__SWIG_5(JntArrayAcc.getCPtr(src), SWIGTYPE_p_Rall2dT_double_double_double_t.getCPtr(factor), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArrayAcc src, double factor, JntArrayAcc dest) {
    kdlPINVOKE.Divide__SWIG_3(JntArrayAcc.getCPtr(src), factor, JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArrayAcc src, SWIGTYPE_p_Rall1dT_double_t factor, JntArrayAcc dest) {
    kdlPINVOKE.Divide__SWIG_4(JntArrayAcc.getCPtr(src), SWIGTYPE_p_Rall1dT_double_t.getCPtr(factor), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Divide(JntArrayAcc src, SWIGTYPE_p_Rall2dT_double_double_double_t factor, JntArrayAcc dest) {
    kdlPINVOKE.Divide__SWIG_5(JntArrayAcc.getCPtr(src), SWIGTYPE_p_Rall2dT_double_double_double_t.getCPtr(factor), JntArrayAcc.getCPtr(dest));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetToZero(JntArrayAcc array) {
    kdlPINVOKE.SetToZero__SWIG_4(JntArrayAcc.getCPtr(array));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int _MSC_VER = kdlPINVOKE._MSC_VER_get();
  public static readonly int KDL_VERSION_MAJOR = kdlPINVOKE.KDL_VERSION_MAJOR_get();
  public static readonly int KDL_VERSION_MINOR = kdlPINVOKE.KDL_VERSION_MINOR_get();
  public static readonly int KDL_VERSION_PATCH = kdlPINVOKE.KDL_VERSION_PATCH_get();
  public static readonly int KDL_VERSION = kdlPINVOKE.KDL_VERSION_get();
  public static readonly string KDL_VERSION_STRING = kdlPINVOKE.KDL_VERSION_STRING_get();
  public static readonly int KDL_INLINE = kdlPINVOKE.KDL_INLINE_get();
  public static readonly int KDL_FRAME_WIDTH = kdlPINVOKE.KDL_FRAME_WIDTH_get();
  public static readonly int KDL_INDEX_CHECK = kdlPINVOKE.KDL_INDEX_CHECK_get();
  public static readonly int KDL_USE_EQUAL = kdlPINVOKE.KDL_USE_EQUAL_get();
}

}
