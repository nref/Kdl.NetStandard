//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class ChainIkSolverPos_LMA : ChainIkSolverPos {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChainIkSolverPos_LMA(global::System.IntPtr cPtr, bool cMemoryOwn) : base(kdlPINVOKE.ChainIkSolverPos_LMA_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChainIkSolverPos_LMA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ChainIkSolverPos_LMA obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_ChainIkSolverPos_LMA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChainIkSolverPos_LMA(Chain _chain, SWIGTYPE_p_Eigen__MatrixT_double_6_1_t _L, double _eps, int _maxiter, double _eps_joints) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_0(Chain.getCPtr(_chain), SWIGTYPE_p_Eigen__MatrixT_double_6_1_t.getCPtr(_L), _eps, _maxiter, _eps_joints), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, SWIGTYPE_p_Eigen__MatrixT_double_6_1_t _L, double _eps, int _maxiter) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_1(Chain.getCPtr(_chain), SWIGTYPE_p_Eigen__MatrixT_double_6_1_t.getCPtr(_L), _eps, _maxiter), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, SWIGTYPE_p_Eigen__MatrixT_double_6_1_t _L, double _eps) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_2(Chain.getCPtr(_chain), SWIGTYPE_p_Eigen__MatrixT_double_6_1_t.getCPtr(_L), _eps), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, SWIGTYPE_p_Eigen__MatrixT_double_6_1_t _L) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_3(Chain.getCPtr(_chain), SWIGTYPE_p_Eigen__MatrixT_double_6_1_t.getCPtr(_L)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, double _eps, int _maxiter, double _eps_joints) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_4(Chain.getCPtr(_chain), _eps, _maxiter, _eps_joints), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, double _eps, int _maxiter) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_5(Chain.getCPtr(_chain), _eps, _maxiter), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain, double _eps) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_6(Chain.getCPtr(_chain), _eps), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_LMA(Chain _chain) : this(kdlPINVOKE.new_ChainIkSolverPos_LMA__SWIG_7(Chain.getCPtr(_chain)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int CartToJnt(JntArray q_init, Frame T_base_goal, JntArray q_out) {
    int ret = kdlPINVOKE.ChainIkSolverPos_LMA_CartToJnt(swigCPtr, JntArray.getCPtr(q_init), Frame.getCPtr(T_base_goal), JntArray.getCPtr(q_out));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void display_jac(JntArray jval) {
    kdlPINVOKE.ChainIkSolverPos_LMA_display_jac(swigCPtr, JntArray.getCPtr(jval));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void updateInternalDataStructures() {
    kdlPINVOKE.ChainIkSolverPos_LMA_updateInternalDataStructures(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string strError(int error) {
    string ret = kdlPINVOKE.ChainIkSolverPos_LMA_strError(swigCPtr, error);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int lastNrOfIter {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_lastNrOfIter_set(swigCPtr, value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = kdlPINVOKE.ChainIkSolverPos_LMA_lastNrOfIter_get(swigCPtr);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double lastDifference {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_lastDifference_set(swigCPtr, value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = kdlPINVOKE.ChainIkSolverPos_LMA_lastDifference_get(swigCPtr);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double lastTransDiff {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_lastTransDiff_set(swigCPtr, value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = kdlPINVOKE.ChainIkSolverPos_LMA_lastTransDiff_get(swigCPtr);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double lastRotDiff {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_lastRotDiff_set(swigCPtr, value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = kdlPINVOKE.ChainIkSolverPos_LMA_lastRotDiff_get(swigCPtr);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Frame T_base_head {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_T_base_head_set(swigCPtr, Frame.getCPtr(value));
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = kdlPINVOKE.ChainIkSolverPos_LMA_T_base_head_get(swigCPtr);
      Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, false);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool display_information {
    set {
      kdlPINVOKE.ChainIkSolverPos_LMA_display_information_set(swigCPtr, value);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = kdlPINVOKE.ChainIkSolverPos_LMA_display_information_get(swigCPtr);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int E_GRADIENT_JOINTS_TOO_SMALL = kdlPINVOKE.ChainIkSolverPos_LMA_E_GRADIENT_JOINTS_TOO_SMALL_get();
  public static readonly int E_INCREMENT_JOINTS_TOO_SMALL = kdlPINVOKE.ChainIkSolverPos_LMA_E_INCREMENT_JOINTS_TOO_SMALL_get();
}

}
