//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class FrameAcc : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FrameAcc(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FrameAcc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FrameAcc obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FrameAcc() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_FrameAcc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RotationAcc M {
    set {
      kdlPINVOKE.FrameAcc_M_set(swigCPtr, RotationAcc.getCPtr(value));
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = kdlPINVOKE.FrameAcc_M_get(swigCPtr);
      RotationAcc ret = (cPtr == global::System.IntPtr.Zero) ? null : new RotationAcc(cPtr, false);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VectorAcc p {
    set {
      kdlPINVOKE.FrameAcc_p_set(swigCPtr, VectorAcc.getCPtr(value));
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = kdlPINVOKE.FrameAcc_p_get(swigCPtr);
      VectorAcc ret = (cPtr == global::System.IntPtr.Zero) ? null : new VectorAcc(cPtr, false);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public FrameAcc() : this(kdlPINVOKE.new_FrameAcc__SWIG_0(), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public FrameAcc(Frame _T) : this(kdlPINVOKE.new_FrameAcc__SWIG_1(Frame.getCPtr(_T)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public FrameAcc(Frame _T, Twist _t, Twist _dt) : this(kdlPINVOKE.new_FrameAcc__SWIG_2(Frame.getCPtr(_T), Twist.getCPtr(_t), Twist.getCPtr(_dt)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public FrameAcc(RotationAcc _M, VectorAcc _p) : this(kdlPINVOKE.new_FrameAcc__SWIG_3(RotationAcc.getCPtr(_M), VectorAcc.getCPtr(_p)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FrameAcc Identity() {
    FrameAcc ret = new FrameAcc(kdlPINVOKE.FrameAcc_Identity(), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FrameAcc Inverse() {
    FrameAcc ret = new FrameAcc(kdlPINVOKE.FrameAcc_Inverse__SWIG_0(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorAcc Inverse(VectorAcc arg) {
    VectorAcc ret = new VectorAcc(kdlPINVOKE.FrameAcc_Inverse__SWIG_1(swigCPtr, VectorAcc.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorAcc Inverse(Vector arg) {
    VectorAcc ret = new VectorAcc(kdlPINVOKE.FrameAcc_Inverse__SWIG_2(swigCPtr, Vector.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Frame GetFrame() {
    Frame ret = new Frame(kdlPINVOKE.FrameAcc_GetFrame(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Twist GetTwist() {
    Twist ret = new Twist(kdlPINVOKE.FrameAcc_GetTwist(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Twist GetAccTwist() {
    Twist ret = new Twist(kdlPINVOKE.FrameAcc_GetAccTwist(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TwistAcc Inverse(TwistAcc arg) {
    TwistAcc ret = new TwistAcc(kdlPINVOKE.FrameAcc_Inverse__SWIG_3(swigCPtr, TwistAcc.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TwistAcc Inverse(Twist arg) {
    TwistAcc ret = new TwistAcc(kdlPINVOKE.FrameAcc_Inverse__SWIG_4(swigCPtr, Twist.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
