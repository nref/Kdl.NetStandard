//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class ChainIkSolverVel_wdls : ChainIkSolverVel {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChainIkSolverVel_wdls(global::System.IntPtr cPtr, bool cMemoryOwn) : base(kdlPINVOKE.ChainIkSolverVel_wdls_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChainIkSolverVel_wdls obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ChainIkSolverVel_wdls obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_ChainIkSolverVel_wdls(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChainIkSolverVel_wdls(Chain chain, double eps, int maxiter) : this(kdlPINVOKE.new_ChainIkSolverVel_wdls__SWIG_0(Chain.getCPtr(chain), eps, maxiter), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverVel_wdls(Chain chain, double eps) : this(kdlPINVOKE.new_ChainIkSolverVel_wdls__SWIG_1(Chain.getCPtr(chain), eps), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverVel_wdls(Chain chain) : this(kdlPINVOKE.new_ChainIkSolverVel_wdls__SWIG_2(Chain.getCPtr(chain)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int CartToJnt(JntArray q_in, Twist v_in, JntArray qdot_out) {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_CartToJnt__SWIG_0(swigCPtr, JntArray.getCPtr(q_in), Twist.getCPtr(v_in), JntArray.getCPtr(qdot_out));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int CartToJnt(JntArray arg0, FrameVel arg1, JntArrayVel arg2) {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_CartToJnt__SWIG_1(swigCPtr, JntArray.getCPtr(arg0), FrameVel.getCPtr(arg1), JntArrayVel.getCPtr(arg2));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setWeightJS(SWIGTYPE_p_Eigen__MatrixXd Mq) {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_setWeightJS(swigCPtr, SWIGTYPE_p_Eigen__MatrixXd.getCPtr(Mq));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setWeightTS(SWIGTYPE_p_Eigen__MatrixXd Mx) {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_setWeightTS(swigCPtr, SWIGTYPE_p_Eigen__MatrixXd.getCPtr(Mx));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLambda(double _lambda) {
    kdlPINVOKE.ChainIkSolverVel_wdls_setLambda(swigCPtr, _lambda);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEps(double eps_in) {
    kdlPINVOKE.ChainIkSolverVel_wdls_setEps(swigCPtr, eps_in);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaxIter(int maxiter_in) {
    kdlPINVOKE.ChainIkSolverVel_wdls_setMaxIter(swigCPtr, maxiter_in);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNrZeroSigmas() {
    uint ret = kdlPINVOKE.ChainIkSolverVel_wdls_getNrZeroSigmas(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getSigmaMin() {
    double ret = kdlPINVOKE.ChainIkSolverVel_wdls_getSigmaMin(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getSigma(SWIGTYPE_p_Eigen__VectorXd Sout) {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_getSigma(swigCPtr, SWIGTYPE_p_Eigen__VectorXd.getCPtr(Sout));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getEps() {
    double ret = kdlPINVOKE.ChainIkSolverVel_wdls_getEps(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getLambda() {
    double ret = kdlPINVOKE.ChainIkSolverVel_wdls_getLambda(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getLambdaScaled() {
    double ret = kdlPINVOKE.ChainIkSolverVel_wdls_getLambdaScaled(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getSVDResult() {
    int ret = kdlPINVOKE.ChainIkSolverVel_wdls_getSVDResult(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string strError(int error) {
    string ret = kdlPINVOKE.ChainIkSolverVel_wdls_strError(swigCPtr, error);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void updateInternalDataStructures() {
    kdlPINVOKE.ChainIkSolverVel_wdls_updateInternalDataStructures(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainJntToJacSolver getSolver() {
    global::System.IntPtr cPtr = kdlPINVOKE.ChainIkSolverVel_wdls_getSolver(swigCPtr);
    ChainJntToJacSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChainJntToJacSolver(cPtr, false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int E_CONVERGE_PINV_SINGULAR = kdlPINVOKE.ChainIkSolverVel_wdls_E_CONVERGE_PINV_SINGULAR_get();
}

}
