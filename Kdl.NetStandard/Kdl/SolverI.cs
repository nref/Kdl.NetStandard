//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class SolverI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SolverI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SolverI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SolverI obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SolverI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_SolverI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int getError() {
    int ret = kdlPINVOKE.SolverI_getError(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string strError(int error) {
    string ret = kdlPINVOKE.SolverI_strError(swigCPtr, error);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void updateInternalDataStructures() {
    kdlPINVOKE.SolverI_updateInternalDataStructures(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int E_DEGRADED = kdlPINVOKE.SolverI_E_DEGRADED_get();
  public static readonly int E_NOERROR = kdlPINVOKE.SolverI_E_NOERROR_get();
  public static readonly int E_NO_CONVERGE = kdlPINVOKE.SolverI_E_NO_CONVERGE_get();
  public static readonly int E_UNDEFINED = kdlPINVOKE.SolverI_E_UNDEFINED_get();
  public static readonly int E_NOT_UP_TO_DATE = kdlPINVOKE.SolverI_E_NOT_UP_TO_DATE_get();
  public static readonly int E_SIZE_MISMATCH = kdlPINVOKE.SolverI_E_SIZE_MISMATCH_get();
  public static readonly int E_MAX_ITERATIONS_EXCEEDED = kdlPINVOKE.SolverI_E_MAX_ITERATIONS_EXCEEDED_get();
  public static readonly int E_OUT_OF_RANGE = kdlPINVOKE.SolverI_E_OUT_OF_RANGE_get();
  public static readonly int E_NOT_IMPLEMENTED = kdlPINVOKE.SolverI_E_NOT_IMPLEMENTED_get();
  public static readonly int E_SVD_FAILED = kdlPINVOKE.SolverI_E_SVD_FAILED_get();

}

}
