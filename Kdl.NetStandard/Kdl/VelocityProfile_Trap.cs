//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class VelocityProfile_Trap : VelocityProfile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal VelocityProfile_Trap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(kdlPINVOKE.VelocityProfile_Trap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VelocityProfile_Trap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(VelocityProfile_Trap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_VelocityProfile_Trap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public VelocityProfile_Trap(double _maxvel, double _maxacc) : this(kdlPINVOKE.new_VelocityProfile_Trap__SWIG_0(_maxvel, _maxacc), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public VelocityProfile_Trap(double _maxvel) : this(kdlPINVOKE.new_VelocityProfile_Trap__SWIG_1(_maxvel), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public VelocityProfile_Trap() : this(kdlPINVOKE.new_VelocityProfile_Trap__SWIG_2(), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetProfile(double pos1, double pos2) {
    kdlPINVOKE.VelocityProfile_Trap_SetProfile(swigCPtr, pos1, pos2);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetProfileDuration(double pos1, double pos2, double newduration) {
    kdlPINVOKE.VelocityProfile_Trap_SetProfileDuration(swigCPtr, pos1, pos2, newduration);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetProfileVelocity(double pos1, double pos2, double newvelocity) {
    kdlPINVOKE.VelocityProfile_Trap_SetProfileVelocity(swigCPtr, pos1, pos2, newvelocity);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMax(double _maxvel, double _maxacc) {
    kdlPINVOKE.VelocityProfile_Trap_SetMax(swigCPtr, _maxvel, _maxacc);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double Duration() {
    double ret = kdlPINVOKE.VelocityProfile_Trap_Duration(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Pos(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Trap_Pos(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Vel(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Trap_Vel(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Acc(double time) {
    double ret = kdlPINVOKE.VelocityProfile_Trap_Acc(swigCPtr, time);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Write(SWIGTYPE_p_std__ostream os) {
    kdlPINVOKE.VelocityProfile_Trap_Write(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override VelocityProfile c_Clone() {
    global::System.IntPtr cPtr = kdlPINVOKE.VelocityProfile_Trap_c_Clone(swigCPtr);
    VelocityProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new VelocityProfile(cPtr, false);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
