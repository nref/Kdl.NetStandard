//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class Joint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Joint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Joint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Joint obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Joint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_Joint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Joint(string name, Joint.JointType type, double scale, double offset, double inertia, double damping, double stiffness) : this(kdlPINVOKE.new_Joint__SWIG_0(name, (int)type, scale, offset, inertia, damping, stiffness), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Joint.JointType type, double scale, double offset, double inertia, double damping) : this(kdlPINVOKE.new_Joint__SWIG_1(name, (int)type, scale, offset, inertia, damping), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Joint.JointType type, double scale, double offset, double inertia) : this(kdlPINVOKE.new_Joint__SWIG_2(name, (int)type, scale, offset, inertia), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Joint.JointType type, double scale, double offset) : this(kdlPINVOKE.new_Joint__SWIG_3(name, (int)type, scale, offset), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Joint.JointType type, double scale) : this(kdlPINVOKE.new_Joint__SWIG_4(name, (int)type, scale), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Joint.JointType type) : this(kdlPINVOKE.new_Joint__SWIG_5(name, (int)type), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name) : this(kdlPINVOKE.new_Joint__SWIG_6(name), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type, double scale, double offset, double inertia, double damping, double stiffness) : this(kdlPINVOKE.new_Joint__SWIG_7((int)type, scale, offset, inertia, damping, stiffness), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type, double scale, double offset, double inertia, double damping) : this(kdlPINVOKE.new_Joint__SWIG_8((int)type, scale, offset, inertia, damping), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type, double scale, double offset, double inertia) : this(kdlPINVOKE.new_Joint__SWIG_9((int)type, scale, offset, inertia), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type, double scale, double offset) : this(kdlPINVOKE.new_Joint__SWIG_10((int)type, scale, offset), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type, double scale) : this(kdlPINVOKE.new_Joint__SWIG_11((int)type, scale), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Joint.JointType type) : this(kdlPINVOKE.new_Joint__SWIG_12((int)type), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint() : this(kdlPINVOKE.new_Joint__SWIG_13(), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia, double _damping, double _stiffness) : this(kdlPINVOKE.new_Joint__SWIG_14(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia, _damping, _stiffness), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia, double _damping) : this(kdlPINVOKE.new_Joint__SWIG_15(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia, _damping), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia) : this(kdlPINVOKE.new_Joint__SWIG_16(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset) : this(kdlPINVOKE.new_Joint__SWIG_17(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type, double _scale) : this(kdlPINVOKE.new_Joint__SWIG_18(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(string name, Vector _origin, Vector _axis, Joint.JointType type) : this(kdlPINVOKE.new_Joint__SWIG_19(name, Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia, double _damping, double _stiffness) : this(kdlPINVOKE.new_Joint__SWIG_20(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia, _damping, _stiffness), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia, double _damping) : this(kdlPINVOKE.new_Joint__SWIG_21(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia, _damping), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset, double _inertia) : this(kdlPINVOKE.new_Joint__SWIG_22(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset, _inertia), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type, double _scale, double _offset) : this(kdlPINVOKE.new_Joint__SWIG_23(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale, _offset), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type, double _scale) : this(kdlPINVOKE.new_Joint__SWIG_24(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type, _scale), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Joint(Vector _origin, Vector _axis, Joint.JointType type) : this(kdlPINVOKE.new_Joint__SWIG_25(Vector.getCPtr(_origin), Vector.getCPtr(_axis), (int)type), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Frame pose(double q) {
    Frame ret = new Frame(kdlPINVOKE.Joint_pose(swigCPtr, q), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Twist twist(double qdot) {
    Twist ret = new Twist(kdlPINVOKE.Joint_twist(swigCPtr, qdot), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector JointAxis() {
    Vector ret = new Vector(kdlPINVOKE.Joint_JointAxis(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector JointOrigin() {
    Vector ret = new Vector(kdlPINVOKE.Joint_JointOrigin(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
    string ret = kdlPINVOKE.Joint_getName(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Joint.JointType getType() {
    Joint.JointType ret = (Joint.JointType)kdlPINVOKE.Joint_getType(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getTypeName() {
    string ret = kdlPINVOKE.Joint_getTypeName(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getInertia() {
    double ret = kdlPINVOKE.Joint_getInertia(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getDamping() {
    double ret = kdlPINVOKE.Joint_getDamping(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getStiffness() {
    double ret = kdlPINVOKE.Joint_getStiffness(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum JointType {
    RotAxis,
    RotX,
    RotY,
    RotZ,
    TransAxis,
    TransX,
    TransY,
    TransZ,
    _None
  }

}

}
