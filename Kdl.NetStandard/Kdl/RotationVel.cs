//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class RotationVel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RotationVel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RotationVel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(RotationVel obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~RotationVel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_RotationVel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Rotation R {
    set {
      kdlPINVOKE.RotationVel_R_set(swigCPtr, Rotation.getCPtr(value));
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = kdlPINVOKE.RotationVel_R_get(swigCPtr);
      Rotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rotation(cPtr, false);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vector w {
    set {
      kdlPINVOKE.RotationVel_w_set(swigCPtr, Vector.getCPtr(value));
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = kdlPINVOKE.RotationVel_w_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RotationVel() : this(kdlPINVOKE.new_RotationVel__SWIG_0(), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public RotationVel(Rotation _R) : this(kdlPINVOKE.new_RotationVel__SWIG_1(Rotation.getCPtr(_R)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public RotationVel(Rotation _R, Vector _w) : this(kdlPINVOKE.new_RotationVel__SWIG_2(Rotation.getCPtr(_R), Vector.getCPtr(_w)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation value() {
    Rotation ret = new Rotation(kdlPINVOKE.RotationVel_value(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector deriv() {
    Vector ret = new Vector(kdlPINVOKE.RotationVel_deriv(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorVel UnitX() {
    VectorVel ret = new VectorVel(kdlPINVOKE.RotationVel_UnitX(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorVel UnitY() {
    VectorVel ret = new VectorVel(kdlPINVOKE.RotationVel_UnitY(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorVel UnitZ() {
    VectorVel ret = new VectorVel(kdlPINVOKE.RotationVel_UnitZ(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel Identity() {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_Identity(), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RotationVel Inverse() {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_Inverse__SWIG_0(swigCPtr), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorVel Inverse(VectorVel arg) {
    VectorVel ret = new VectorVel(kdlPINVOKE.RotationVel_Inverse__SWIG_1(swigCPtr, VectorVel.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorVel Inverse(Vector arg) {
    VectorVel ret = new VectorVel(kdlPINVOKE.RotationVel_Inverse__SWIG_2(swigCPtr, Vector.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DoRotX(SWIGTYPE_p_Rall1dT_double_t angle) {
    kdlPINVOKE.RotationVel_DoRotX(swigCPtr, SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoRotY(SWIGTYPE_p_Rall1dT_double_t angle) {
    kdlPINVOKE.RotationVel_DoRotY(swigCPtr, SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoRotZ(SWIGTYPE_p_Rall1dT_double_t angle) {
    kdlPINVOKE.RotationVel_DoRotZ(swigCPtr, SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public static RotationVel RotX(SWIGTYPE_p_Rall1dT_double_t angle) {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_RotX(SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel RotY(SWIGTYPE_p_Rall1dT_double_t angle) {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_RotY(SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel RotZ(SWIGTYPE_p_Rall1dT_double_t angle) {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_RotZ(SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel Rot(Vector rotvec, SWIGTYPE_p_Rall1dT_double_t angle) {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_Rot(Vector.getCPtr(rotvec), SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RotationVel Rot2(Vector rotvec, SWIGTYPE_p_Rall1dT_double_t angle) {
    RotationVel ret = new RotationVel(kdlPINVOKE.RotationVel_Rot2(Vector.getCPtr(rotvec), SWIGTYPE_p_Rall1dT_double_t.getCPtr(angle)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TwistVel Inverse(TwistVel arg) {
    TwistVel ret = new TwistVel(kdlPINVOKE.RotationVel_Inverse__SWIG_3(swigCPtr, TwistVel.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TwistVel Inverse(Twist arg) {
    TwistVel ret = new TwistVel(kdlPINVOKE.RotationVel_Inverse__SWIG_4(swigCPtr, Twist.getCPtr(arg)), true);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
